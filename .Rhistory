view         = view,
plotPCs      = plotPCs,
empty        = "")
})
# Calculations when 'Calculate' button pressed ---------------------
DATA <- eventReactive(input$button,{
# Remove line breaks from fasta input
query_seq <- gsub("(>.*?)\n","\\1<\n",input$query_sequence)
query_seq <- gsub("([^<])\n([^>])","\\1\\2",query_seq)
query_seq <- gsub("<\n","\n",query_seq)
# Ignore all but first input sequence and remove fasta headings
query_seq <- gsub("(\n){2,100}","\n",query_seq)
query_seq <- gsub("\n.*","",gsub(">.*?\n","",query_seq))
# Superfamily match
newseq.cis <- seq.MSA.add(SAPCA.cis,query_seq,"cis-Defensins")
newseq.tra <- seq.MSA.add(SAPCA.tra,query_seq,"trans-Defensins")
if(input$query_type=="cis-Defensin" |
input$query_type=="unknown" & newseq.cis$aln.hit.score >= newseq.tra$aln.hit.score){
match        <- "cis-Defensin"
SAPCA.match  <- SAPCA.cis
newseq.match <- newseq.cis
view         <- view.cis
plotPCs      <- c(1,2,3)
}else if(input$query_type=="trans-Defensin" |
input$query_type=="unknown" & newseq.cis$aln.hit.score <= newseq.tra$aln.hit.score){
match        <- "trans-Defensin"
SAPCA.match  <- SAPCA.tra
newseq.match <- newseq.tra
view         <- view.tra
plotPCs      <- c(1,2,4)
}
temp.seq  <- gsub("subject: |[[]1]| ","",capture.output(newseq.match$seq.unalignable)[3])
newseq.r  <- seq.rotate    (SAPCA.match, newseq.match)
newseq.c  <- seq.clust.add (SAPCA.match, newseq.r)
SAPCA.add <- seq.SAPCA.add (SAPCA.match, newseq.r, newseq.c)
if(match=="cis-Defensin"){
clust.name   <- clusters.cis[SAPCA.add$seq.space.clusters$classification[1]]
}else if(match=="trans-Defensin"){
clust.name   <- clusters.tra[SAPCA.add$seq.space.clusters$classification[1]]
}
# Motif match
motif.matches <- NULL
for(m in 1:nrow(motifs)){
motif.match <- length(grep(as.character(motifs[m,2]),
as.character(as.AAstring(query_seq,degap=1)),
ignore.case = 1))==1
motif.matches <- append(motif.matches,motif.match)
}
if(all(motif.matches==0)){
motif.short <- print("No strict matches")
motif       <- print("It does not strictly match any defensin motif")
}else{
motif.short <- paste(as.character(motifs[motif.matches,1]),collapse = " and ")
motif       <- paste0("It contains the ",
paste(as.character(motifs[motif.matches,1]),collapse = " and "),
" cysteine motif")
}
# data variables list
list(match         = match,
motif         = motif,
motif.short   = motif.short,
SAPCA.match   = SAPCA.match,
newseq.match  = newseq.match,
newseq.cis    = newseq.cis,
newseq.tra    = newseq.tra,
view          = view,
plotPCs       = plotPCs,
clust.name    = clust.name,
temp.seq      = temp.seq,
SAPCA.add     = SAPCA.add,
empty         = "")
})
DATA2.view <- eventReactive(input$button2.view,{
list(selected.view = plot_overlay_3Dlabel.A(SAPCA   = DATA.view()$SAPCA.match,
plotPCs = DATA.view()$plotPCs),
go = TRUE)
})
DATA2 <- eventReactive(input$button2,{
list(selected = plot_overlay_3Dlabel.A(SAPCA   = DATA()$SAPCA.add,
plotPCs = DATA()$plotPCs),
go = TRUE)
})
# Plot seqspace (view) -------------------------------------
output$mainplot.view <- renderPlot({
# plot(DATA.view()$plotPCs)
if(DATA.view()$match=="cis-Defensin"){
colours<-palette(c("blue",            #1 Plant extreme
"darkolivegreen4", #2 Plant main
"grey",            #3 Intermed
"purple1",         #4 Plant sex
"orange",          #5 Plant his
"maroon",          #6 Invert
"red"))            #7 Tox
}
if(DATA.view()$match=="trans-Defensin"){
colours<-palette(c("blue",     #1 Theta
"red",      #2 Aalpha
"orange",   #3 Beta
"purple"))  #4
}
plot_3Dclusters(DATA.view()$SAPCA.match,
plotPCs = DATA.view()$plotPCs)
rgl::rgl.viewpoint(180,-70)
# rgl::par3d(DATA()$view)
if(DATA2.view()$go){
plot_overlay_3Dlabel.B(selection = DATA2.view()$selected.view,
SAPCA     = DATA.view()$SAPCA.match,
plotPCs   = DATA.view()$plotPCs)
}
})
# Plot seqspace (query) -------------------------------------
output$mainplot <- renderPlot({
# plot(DATA()$plotPCs)
if(DATA()$match=="cis-Defensin"){
colours<-palette(c("blue",            #1 Plant extreme
"darkolivegreen4", #2 Plant main
"grey",            #3 Intermed
"purple1",         #4 Plant sex
"orange",          #5 Plant his
"maroon",          #6 Invert
"red"))            #7 Tox
}
if(DATA()$match=="trans-Defensin"){
colours<-palette(c("blue",     #1 Theta
"red",      #2 Aalpha
"orange",   #3 Beta
"purple"))  #4
}
plot_3Dclusters(DATA()$SAPCA.add,
plotPCs = DATA()$plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(DATA()$SAPCA.add$numerical.alignment$MSA)-1)))
rgl::rgl.viewpoint(180,-70)
# rgl::par3d(DATA()$view)
if(DATA2()$go){
plot_overlay_3Dlabel.B(selection = DATA2()$selected,
SAPCA     = DATA()$SAPCA.add,
plotPCs   = DATA()$plotPCs)
}
})
# output$histplot <- renderPlot({
#
#   aln.cis <- DATA()$newseq.cis$aln.all.score
#   aln.tra <- DATA()$newseq.tra$aln.all.score
#
#   aln.cis[aln.cis<=0]<-0
#   aln.tra[aln.tra<=0]<-0
#
#   aln.cistra <- c(aln.cis,
#                   aln.tra)
#
#   max <- min(10,max(c(hist(aln.cis,(0:40)/40,plot = 0)$density,
#                       hist(aln.tra,(0:40)/40,plot = 0)$density)))
#
#   hist(aln.cis,
#        xlim   = c(0,1),
#        ylim   = c(0,max),
#        breaks = (0:40)/40,
#        col    = rgb(0,0.5,0,0.5), # green
#        freq   = FALSE,
#        xlab   = "Similarity",
#        main   = "")
#   hist(aln.tra,
#        breaks = (0:40)/40,
#        col    = rgb(0,0,0.8,0.5), # blue
#        freq   = FALSE,
#        add    = TRUE)
#   box()
# })
# Text report on match ------------------------------------
# Superfamily type and best hit
output$report_legend <- renderText({
paste ("blue:","'extreme' plant antimicrobial defensins.",    #1
"green:","plant antimicrobial defensins.",      #2
"grey:","proteins with a mixture of functions from across the eukarya.", #3
"purple:","plant signalling proteins.",                #4
"orange:","plant histidine-rich defensins.",           #5
"maroon:","arthropod antimicrobial defensins.",        #6
"red:","arthropod alpha neurotoxins."                  #7
)
})
output$title <- renderText({
paste0("Results summary",
DATA()$empty)
})
output$report <- renderText({
# Report section 1
rep1 <- if(input$query_type=="unknown"){
if(quantile(DATA()$newseq.match$aln.all.score, 0.95)>=0.15){
print(paste0("The submitted query sequence is more likely to be from the ",
DATA()$match,
" superfamily. ",
DATA()$motif,
". Its similarity to the nearest sequence is ",
percent(DATA()$newseq.match$aln.hit.score),
"."))
}else{
print(paste0("The query sequence may not be a defensin. Although defensin sequences are highly variable, the query is a very poor match to any defensin in the database. Therefore, please interpret any of this data with caution. ",
DATA()$motif,
". Its similarity to any known defensin is only ",
percent(DATA()$newseq.match$aln.hit.score),
"."))
}
}
# Report section 2
rep2 <- paste0("The sequence falls within cluster ",
DATA()$SAPCA.add$seq.space.clusters$classification[1],
", which contains ",
DATA()$clust.name,
".")
# Report section 3
exceptions <- if(sum(strsplit(DATA()$temp.seq,"")[[1]]=="-")!=0){
paste0(", except for ",
sum(strsplit(DATA()$temp.seq,"")[[1]]=="-"),
". The residues that were taken into account in calculating its sequence space position were therefore: '",
DATA()$temp.seq,
"'")
}
rep3 <- paste0("All residues of the query sequence were alignable to the existing ",
DATA()$match,
" MSA",
exceptions,
".")
# join the report sentences together into paragraph
paste(rep1,rep2,rep3)
})
# Nearest neighbours fasta alignment
output$fasta <- renderUI({
HTML(
as.fasta(DATA()$SAPCA.add$numerical.alignment$MSA[rownames(closest(DATA()$SAPCA.add,n = 1+input$return_nearest,"query")),],
decolgap = TRUE,
print    = TRUE)
)
})
# Selected sequences fasta alignment
output$fasta2 <- renderUI({
HTML(
as.fasta(DATA()$SAPCA.add$numerical.alignment$MSA[DATA2()$selected$selected.set,],
decolgap = TRUE,
print    = TRUE)
)
})
# Selected sequences fasta alignment
output$fasta2.view <- renderUI({
HTML(
as.fasta(DATA.view()$SAPCA.match$numerical.alignment$MSA[DATA2.view()$selected$selected.set,],
decolgap = TRUE,
print    = TRUE)
)
})
DATA.table <- eventReactive(input$button,{
#Summary table
summary.table <- data.frame(cbind(c("Superfamily",
"Cysteine motifs",
"Max similarity",
"SeqSpace cluster",
"Cluster functions",
"Unalignable residues"),
c(if(quantile(DATA()$newseq.match$aln.all.score, 0.95)>=0.15){
DATA()$match
}else{
paste0("May not be a defensin (",
DATA()$match,
" is best match)")
},
DATA()$motif.short,
percent(DATA()$newseq.match$aln.hit.score),
DATA()$SAPCA.add$seq.space.clusters$classification[1],
DATA()$clust.name,
sum(strsplit(DATA()$temp.seq,"")[[1]]=="-"))
))
colnames(summary.table)<- c("Property","Result")
summary.table
})
output$table <- renderTable(DATA.table())
})
numericise_MSA <- function(MSA,
res.prop,
cys){
seq.names <- rownames(MSA)
aln.len   <- ncol(MSA)
res.props <- colnames(res.prop)
res.avail <- row.names(res.prop)
# Numericise MSA based on res.prop
MSA.num.tall <- res.prop[t(MSA),]
# Name data types
rownames(MSA.num.tall) <- NULL
sequence     <- rep(x = seq.names, each  = aln.len)
residue      <- rep(x = 1:aln.len, times = length(seq.names))
MSA.num.tall <- cbind(sequence, residue, MSA.num.tall)
# Stack data into list of matrices
MSA.num.stack <- NULL
for (x in 1:length(res.props)) {
col.names <- paste(1:aln.len,
rep(res.props[x],aln.len),
sep = ".")
MSA.num.stack[[res.props[x]]] <- matrix(MSA.num.tall[,x+2],
ncol     = aln.len,
byrow    = TRUE,
dimnames = list(seq.names,
col.names))
}
# Also reflow into single wide matrix
MSA.num.wide <- MSA.num.stack[[1]]
for (x in 2:length(res.props)) {
MSA.num.wide <- cbind(MSA.num.wide, MSA.num.stack[[res.props[x]]])
}
############################.
# Scaling by property type #
############################.
# Take means and variances of each property type
prop.means <- NULL
prop.vars  <- NULL
for (x in 1:length(res.props)) {
prop.means[x] <- mean(MSA.num.stack[[x]],na.rm=1)
prop.vars[x]  <- var(tidyr::gather(data.frame(MSA.num.stack[[x]]))[2],na.rm=1)
}
names(prop.means) <- res.props
names(prop.vars)  <- res.props
# Scale numericised MSA to prop.means and prop.vars
MSA.scale.stack <- NULL
for (x in 1:length(res.props)) {
MSA.scale.stack[[res.props[x]]] <- (MSA.num.stack[[res.props[x]]]- prop.means[x]) /
sqrt(prop.vars[x])
}
# Replace gaps (currently "NA") with column average
# Create na.colmean function
na.colmean<-function(x){
x[is.na(x)] <- mean(as.matrix(x),na.rm = 1)
x
}
# For each property of MSA.num.stack, apply na.colmean function to each matrix comlumn
for (x in 1:length(res.props)) {
MSA.scale.stack[[x]] <- apply(MSA.scale.stack[[x]],2,na.colmean)
}
# Also reflow into singe wide matrix for PCA
MSA.scale.wide <- MSA.scale.stack[[1]]
for (x in 2:length(res.props)) {
MSA.scale.wide <- cbind(MSA.scale.wide, MSA.scale.stack[[x]])
}
##################.
# Alignment list #
##################.
numerical.alignment <- list(MSA             = MSA,
res.prop        = res.prop,
MSA.num.stack   = MSA.num.stack,
MSA.num.wide    = MSA.num.wide,
MSA.scale.stack = MSA.scale.stack,
MSA.scale.wide  = MSA.scale.wide,
prop.means      = prop.means,
prop.vars       = prop.vars,
seq.names       = seq.names,
aln.len         = aln.len)
numerical.alignment
}
closest <- function (SAPCA,
sequence,
PC = 1:3,
n  = 10){
coords     <- SAPCA$seq.space.PCA$coordinates
centre     <- coords[sequence,PC]
centre.m   <- matrix(rep(centre,nrow(coords)),
nrow  = nrow(coords),
byrow = TRUE)
distances  <- SAPCA$seq.space.PCA$coordinates[,PC]-centre.m
rootsquare <- sqrt(rowSums(distances^2))
sorted     <- as.matrix(rootsquare[order(rootsquare)])
colnames(sorted) <- "distance"
head(sorted,n)
}
read.MSA <- function(MSA){
# Load sequence MSA
# if a matrix, can be used straight away
# if raw fasta file, use seqinr to convert to data frame
if (!is.matrix(MSA)){
MSA       <- data.frame(seqinr::read.fasta(MSA,set.attributes=FALSE))
}
# if a data frame, convert to matrix
if (is.data.frame(MSA)){
MSA       <- as.matrix(t(toupper(as.matrix(MSA))))
}
MSA
}
as.fasta <- function(matrix,degap=FALSE,decolgap=FALSE,write=FALSE,print=FALSE,name=NULL){
# Remove empty columns
if(decolgap){
matrix<-matrix[,colMeans(matrix=="-")!=1]
}
# Convert alignment matrix to list of strings
names <- paste(">",row.names(matrix),sep="")
seqs  <- do.call("paste",c(data.frame(matrix),sep=""))
# If just one sequence, this is how to name it
if(is.null(dim(matrix))){
names <- ">sequence"
if(!is.null(name)){
names <- paste(">",name,sep="")
}
seqs  <- paste(matrix,collapse="")
}
# Degap sequences
if (degap){
seqs <- gsub("-","",seqs)
}
# Interleave names and sequences
ord1 <- 2*(1:length(names))-1
ord2 <- 2*(1:length(seqs))
# Output
if (print==TRUE){
paste0(c(names,seqs)[order(c(ord1,ord2))], sep = "<br/>")
}else{
if (write==FALSE){
cat(c(names,seqs)[order(c(ord1,ord2))], sep = "\n")
}
else{
if (!grepl(".fa",write,ignore.case=TRUE)){
write<-paste(write,".fa",sep="")
}
cat(c(names,seqs)[order(c(ord1,ord2))], sep = "\n", file = write)
}
}
}
as.AAstring<-function(string, degap=FALSE){
string <- paste(string,collapse="")
if(degap==TRUE){
string<-gsub("-","",string)
}
output <- Biostrings::AAString(string)
output
}
as.AAstringSet<-function(MSA, degap=FALSE){
MSA <- apply(MSA,1,paste,collapse="")
if(degap==TRUE){
MSA<-gsub("-","",MSA)
}
output <- Biostrings::AAStringSet(MSA)
output
}
SAPCA.cis$seq.space.clusters$classification[1]
SAPCA.cis <- readRDS("data\\CisDef.reference.PCA.RDS")
SAPCA.tra <- readRDS("data\\TransDef.reference.PCA.RDS")
view.cis <- readRDS("data\\CisDef.viewangle.RDS")
view.tra <- readRDS("data\\TransDef.viewangle.RDS")
BLOSUM40 <- readRDS("data\\BLOSUM.RDS")
motifs <- readRDS("data\\cysteine_motifs.RDS")
SAPCA.cis$seq.space.clusters$classification[1]
SAPCA.cis$seq.space.PCA$coordinates[1]
SAPCA.cis$seq.space.PCA$coordinates[1,1]
SAPCA.cis$seq.space.PCA$coordinates[1,]
SAPCA.cis$seq.space.PCA$coordinates[,1]
rownames(SAPCA.cis$seq.space.PCA$coordinates)
rownames(SAPCA.cis$seq.space.PCA$coordinates)==temp
rownames(SAPCA.cis$seq.space.PCA$coordinates)==SAPCA.cis$numerical.alignment$seq.names
SAPCA.cis$numerical.alignment$seq.names
SAPCA.cis$numerical.alignment$seq.names[1:5]
rownames(SAPCA.cis$seq.space.PCA$coordinates)[1:5]
dim(SAPCA.cis$seq.space.PCA$coordinates)
length(SAPCA.cis$numerical.alignment$seq.names)
rownames(SAPCA.cis$seq.space.PCA$coordinates)[100:105]
SAPCA.cis$numerical.alignment$seq.names[100:105]
rownames(SAPCA.cis$seq.space.PCA$coordinates)->SAPCA.cis$numerical.alignment$seq.names
rownames(SAPCA.cis$seq.space.PCA$coordinates)[1]
rownames(SAPCA.cis$seq.space.clusters$classification)[1]
names(SAPCA.cis$seq.space.clusters$classification)[1]
SAPCA.cis <- readRDS("data\\CisDef.reference.PCA.RDS")
names(SAPCA.cis$seq.space.clusters$classification)[1]
rownames(SAPCA.cis$seq.space.PCA$coordinates)<-SAPCA.cis$numerical.alignment$seq.names
names(SAPCA.cis$seq.space.clusters$classification)[1]
temp
temp[1]
SAPCA.cis <- readRDS("data\\CisDef.reference.PCA.RDS")
folder    <- "C:\\Users\\T\\OneDrive\\1-Scripts\\GitHub\\DefSpaceShiny"
setwd(folder)
SAPCA.cis <- readRDS("data\\CisDef.reference.PCA.RDS")
names(SAPCA.cis$seq.space.clusters$classification)[1]
names(SAPCA.cis$numerical.alignment$MSA)[1]
rownames(SAPCA.cis$numerical.alignment$MSA)[1]
rownames(SAPCA.cis$numerical.alignment$MSA.num.wide)[1]
rownames(SAPCA.cis$numerical.alignment$MSA.scale.wide)[1]
(SAPCA.cis$numerical.alignment$seq.names)[1]
(SAPCA.cis$numerical.alignment$seq.names)->rownames(SAPCA.cis$numerical.alignment$MSA)
(SAPCA.cis$numerical.alignment$seq.names)->rownames(SAPCA.cis$numerical.alignment$MSA.num.wide)
(SAPCA.cis$numerical.alignment$seq.names)->rownames(SAPCA.cis$numerical.alignment$MSA.scale.wide)
(SAPCA.cis$numerical.alignment$seq.names)->rownames(SAPCA.cis$seq.space.PCA$coordinates)
(SAPCA.cis$numerical.alignment$seq.names)->names(SAPCA.cis$seq.space.clusters$classification)
SAPCA.cis$seq.space.clusters$classification[1]
saveRDS(SAPCA.cis,file.choose())
runApp()
shiny::runApp()
shiny::runApp()
rowsum(SAPCA.cis$numerical.alignment$MSA!="-")
rowsum(SAPCA.cis$numerical.alignment$MSA!="-")
rowsum((SAPCA.cis$numerical.alignment$MSA!="-")*1)
SAPCA.cis$numerical.alignment$MSA!="-"
(SAPCA.cis$numerical.alignment$MSA!="-")*1
colSums((SAPCA.cis$numerical.alignment$MSA!="-")*1)
rowSums((SAPCA.cis$numerical.alignment$MSA!="-")*1)
min(rowSums((SAPCA.cis$numerical.alignment$MSA!="-")*1))
max(rowSums((SAPCA.cis$numerical.alignment$MSA!="-")*1))
max(rowSums((SAPCA.tra$numerical.alignment$MSA!="-")*1))
min(rowSums((SAPCA.tra$numerical.alignment$MSA!="-")*1))
shiny::runApp()
runApp()
shiny::runApp()
motifs
motifs[1]
motifs[1,]
motifs <- readRDS("data\\cysteine_motifs.RDS")
motifs[1,]
motifs[2,]
shiny::runApp()
plot_3Dclusters(SAPCA)
plot_3Dclusters(SAPCA.cis)
