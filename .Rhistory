runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
if(as.character(aln.hit.orig)!=as.character(aln.hit.new)){
print(paste(sum(aln.hit.seq.aln.new=="-"),
"residues of the new sequence were not alignable to the",
SAPCAname,
"reference MSA so were ignored"))
}
newseq.tra
newseq.tra <- seq.MSA.add(SAPCA.tra,sequence,"trans-Defensins")
newseq.tra
newseq.tra$seq.unalignable
print(newseq.tra$seq.unalignable)
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
newseq.tra$seq.unalignable
capture.output(newseq.tra$seq.unalignable)
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
capture.output(newseq.tra$seq.unalignable)[2:3]
capture.output(newseq.tra$seq.unalignable)[3]
gsub("subject: [1]","",MSA)capture.output(newseq.tra$seq.unalignable)[3]
gsub("subject: [1]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject:","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: \[1\]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: \[1]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: ","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: [[]]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: [[1]]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("[[1]]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("[]]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("[[]]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("[[]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("[[]1]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: |[[]1] ","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: |[[]1] ","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject:|[[]1 ]","",capture.output(newseq.tra$seq.unalignable)[3])
gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3])
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
newseq.tra$seq.unalignable
newseq.tra$MSA[1,]
unlist(newseq.tra$seq.unalignable,"")
unlist(gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3]),"")
strsplit(gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3]),"")
strsplit(gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3]),"")=="-"
strsplit(gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3]),"")=="R"
strsplit(gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3]),"")->temp
temp=="-"
temp
temp[[1]]
temp[[1=="-"
temp[[1]]=="-"
temp[[1]]=="-"
sum(temp[[1]]=="-")
temp <- gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(temp[[1]]=="-"),
"It was therefore treatesd as:",
temp
)
temp <- gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3])
sum(temp[[1]]=="-")
temp
temp[[1]]=="-")
(temp[[1]]=="-")
(temp1=="-")
(temp=="-")
sum(strsplit(temp[[1]],"")"-")
(temp[[1]],"")
sum(strsplit(temp[[1]],""),"-")
sum(strsplit(temp[[1]],""),"-")
sum(strsplit(temp[[1]],"")=="-")
strsplit(temp[[1]],"")
strsplit(temp,"")[[1]]
strsplit(temp,"")[[1]]=="-"
sum(strsplit(temp,"")[[1]]=="-")
temp <- gsub("subject: |[[]1]","",capture.output(newseq.tra$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(strsplit(temp,"")[[1]]=="-"),
"residues that weren't alignable to the exisintg MSA.",
"It was therefore treatesd as:",
temp
)
gsub("subject: |[[]1]| ","",capture.output(newseq.tra$seq.unalignable)[3])
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.tra$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(strsplit(temp,"")[[1]]=="-"),
"residues that weren't alignable to the exisintg MSA.",
"It was therefore treated as:",
temp
)
sequnce
sequence
newseq.tra$seq.unalignable
newseq.tra$MSA[1:2,]
as.fasta(newseq.tra$MSA[1:2,])
as.fasta(newseq.tra$MSA[1:2,],decolgap=1)
as.fasta(newseq.cis$MSA[1:2,],decolgap=1)
output$report2 <- renderText({
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.cis$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(strsplit(temp,"")[[1]]=="-"),
"residues that weren't alignable to the exisintg MSA.",
"It was therefore treated as:",
temp
)
})
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.cis$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(strsplit(temp,"")[[1]]=="-"),
"residues that weren't alignable to the exisintg MSA.",
"It was therefore treated as:",
temp
)
output$report2 <- renderText({
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.cis$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(strsplit(temp,"")[[1]]=="-"),
"residues that weren't alignable to the exisintg",
match,
"MSA.",
"It was therefore treated as:",
temp
)
})
match
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.cis$seq.unalignable)[3])
paste("The submitted query sequence had",
sum(strsplit(temp,"")[[1]]=="-"),
"residues that weren't alignable to the exisintg",
match,
"MSA.",
"It was therefore treated as:",
temp
)
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
print(paste(sep="",
"The submitted query sequence appears to be a ",
match,
". Its similarity to the nearest sequence is ",
percent(newseq.match$aln.hit.score)))
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
if(match=="cis-Defensin"|match2=="cis-Defensin"){1}
if(match=="cis-Defensin"){
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.cis$seq.unalignable)[3])
}
if(match=="trans-Defensin"){
temp <- gsub("subject: |[[]1]| ","",capture.output(newseq.tra$seq.unalignable)[3])
}
temp
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
SAPCA.match$seq.space.clusters$classification[1]
SAPCA.add$seq.space.clusters$classification[1]
print(SAPCA.add$seq.space.clusters$classification[1])
c(1,SAPCA.add$seq.space.clusters$classification[1])
paste("this was in",SAPCA.add$seq.space.clusters$classification[1])
paste("The sequence falls within cluster",SAPCA.add$seq.space.clusters$classification[1], "(p =",2,")")
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
SAPCA.add$seq.space.clusters$likelihoods[1,1],
")")
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
round(SAPCA.add$seq.space.clusters$likelihoods[1,1]),
")")
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
round(SAPCA.add$seq.space.clusters$likelihoods[1,1],2),
")")
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
round(SAPCA.add$seq.space.clusters$likelihoods[1,1],digits = 20),
")")
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
SAPCA.add$seq.space.clusters$likelihoods[1,1],
")")
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
SAPCA.add$seq.space.clusters$likelihoods[1,SAPCA.add$seq.space.clusters$classification[1]],
")")
SAPCA.add$seq.space.clusters$likelihoods[1,]
plot(SAPCA.add$seq.space.clusters$likelihoods[1,])
paste("The sequence falls within cluster",
SAPCA.add$seq.space.clusters$classification[1],
"(p =",
SAPCA.add$seq.space.clusters$likelihoods[1,SAPCA.add$seq.space.clusters$classification[1]],
")")
paste0("The sequence falls within cluster ",
SAPCA.add$seq.space.clusters$classification[1],
" (p = ",
SAPCA.add$seq.space.clusters$likelihoods[1,SAPCA.add$seq.space.clusters$classification[1]],
")")
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
clusters.cis=c("mostly plant antimicrobial defensins",     #1
"'extreme' plant antimicrobial defensins",  #2
"arthropod alpha neurotoxins",              #3
"plant sinalling proteins",                 #4
"plant histidine-rich defensins",           #5
"a mixture of defensins and toxins from across the eukarya",#6
"arthropos antimicrobial defensins")        #7
SAPCA.tra$seq.space.clusters
SAPCA.tra$seq.space.clusters$classification
clusters.tra=c("theta defensins",   #1
"alphs defensins",   #2
"beta defensins",    #3
"big defensins")     #4
clusters.cis=c("mostly plant antimicrobial defensins",     #1
"'extreme' plant antimicrobial defensins",  #2
"arthropod alpha neurotoxins",              #3
"plant sinalling proteins",                 #4
"plant histidine-rich defensins",           #5
"a mixture of defensins and toxins from across the eukarya",#6
"arthropos antimicrobial defensins")        #7
clusters.tra=c("theta defensins",   #1
"alphs defensins",   #2
"beta defensins",    #3
"big defensins")     #4
if(input$query_type=="cis-Defensin"){
clust.name <- clusters.cis[SAPCA.add$seq.space.clusters$classification[1]]
}
if(input$query_type=="trans-Defensin"){
clust.name <- clusters.tra[SAPCA.add$seq.space.clusters$classification[1]]
}
if(input$query_type=="unknown"){
if(match=="cis-Defensin"){
clust.name <- clusters.cis[SAPCA.add$seq.space.clusters$classification[1]]
}
if(match=="trans-Defensin"){
clust.name <- clusters.tra[SAPCA.add$seq.space.clusters$classification[1]]
}
}
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
df <- data.frame(x = rnorm(100), y = rnorm(100)) %>%
mutate(id = ntile(x, 4))
runApp(shinyApp(
ui = fluidPage(
sidebarPanel(width = 2,
selectInput("id",
"Select ID:",
c(1:4))
),
mainPanel(width = 10,
plotOutput("plot")
)
),
server = function(input, output, session) {
data <- reactive({
df <- df %>%
filter(id == input$id)
df
})
output$plot <- renderPlot({
ggplot(data(), aes(x,y)) +
geom_point()
})
}
))
?mutate
df <- data.frame(x = rnorm(100), y = rnorm(100)) %>%
plyr::mutate(id = ntile(x, 4))
library("plyr")
df <- data.frame(x = rnorm(100), y = rnorm(100)) %>%
plyr::mutate(id = ntile(x, 4))
?ntlie
?ntile
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
x
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
reactive({2})
data<- reactive({2})
data()
data
a=1
b<-input$return_nearest
c=2
list(a=a,
b=b,
c=c)
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
match2
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
?getSymbols
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
runApp('C:/Users/T/OneDrive/1-Scripts/GitHub/DefSpaceShiny')
install.packages("shinyRGL")
shiny::runApp()
aln.add
MSA   <- SAPCA$numerical.alignment$MSA
SAPCA<-SAPCA.tra
MSA   <- SAPCA$numerical.alignment$MSA
MSA2  <- as.AAstringSet(MSA,degap = TRUE)
seqs  <- nrow(MSA)
seq   <- as.AAstring(sequence, degap=FALSE)
seq.d <- as.AAstring(sequence, degap=TRUE)
BLOSUM40 <- blosum()
aln.all <- Biostrings::pairwiseAlignment(MSA2,
seq.d,
substitutionMatrix = BLOSUM40,
gapOpening   = 0,
gapExtension = 8,
scoreOnly    = TRUE)
# Max possible similarity score
aln.limit <- Biostrings::pairwiseAlignment(seq.d,
seq.d,
substitutionMatrix = BLOSUM40,
gapOpening   = 0,
gapExtension = 8,
scoreOnly    = TRUE)
# Similarity score as percentage of max
aln.hit.score <- max(aln.all)/aln.limit
# The sequence of the best matching member of the database
aln.hit.num  <- which(aln.all==max(aln.all))[1]
aln.hit.name <- SAPCA$numerical.alignment$seq.names[aln.hit.num]
aln.hit.seq  <- paste(as.AAstring(MSA[aln.hit.num,],degap = 1))
# Use "*" to indicate gaps in the best reference sequence (aln.hit)
aln.hit <- gsub("-","*",as.AAstring(MSA[aln.hit.num,]))
aln.add <- Biostrings::pairwiseAlignment(aln.hit,
seq.d,
substitutionMatrix = BLOSUM40,
gapOpening   = 0,
gapExtension = 8)
# Has the new sequence introduced exrta gaps into the hit sequence alignement?
aln.hit.orig         <- as.AAstring(MSA[aln.hit.num,])
aln.hit.new          <- Biostrings::pattern(aln.add)
aln.hit.seq.aln.orig <- unlist(strsplit(as.character(aln.hit.orig),""))
aln.hit.seq.aln.new  <- unlist(strsplit(as.character(aln.hit.new),""))
if(as.character(aln.hit.orig)!=as.character(aln.hit.new)){
print(paste(sum(aln.hit.seq.aln.new=="-"),
"residues of the new sequence were not alignable to the",
SAPCAname,
"reference MSA so were ignored"))
}
SAPCAname<="temp"
SAPCAname<-"temp"
# Use "*" to indicate gaps in the best reference sequence (aln.hit)
aln.hit <- gsub("-","*",as.AAstring(MSA[aln.hit.num,]))
aln.add <- Biostrings::pairwiseAlignment(aln.hit,
seq.d,
substitutionMatrix = BLOSUM40,
gapOpening   = 0,
gapExtension = 8)
# Has the new sequence introduced exrta gaps into the hit sequence alignement?
aln.hit.orig         <- as.AAstring(MSA[aln.hit.num,])
aln.hit.new          <- Biostrings::pattern(aln.add)
aln.hit.seq.aln.orig <- unlist(strsplit(as.character(aln.hit.orig),""))
aln.hit.seq.aln.new  <- unlist(strsplit(as.character(aln.hit.new),""))
if(as.character(aln.hit.orig)!=as.character(aln.hit.new)){
print(paste(sum(aln.hit.seq.aln.new=="-"),
"residues of the new sequence were not alignable to the",
SAPCAname,
"reference MSA so were ignored"))
}
# Alignment addition as matrix
aln.add.mat <- rbind(unlist(strsplit(as.character(Biostrings::pattern(aln.add)),"")),
unlist(strsplit(as.character(Biostrings::subject(aln.add)),"")))
# Unmathcable resiues removed from aligned sequence
aln.add2 <- aln.add.mat[2,][aln.add.mat[1,]!="-"]
aln.add3 <- paste(as.AAstring(aln.add2))
# Gaps in the hit sequence (original and newly aligned)
gaps.orig       <- unlist(strsplit(as.character(aln.hit.orig),"[A-Z]"))
gaps.count.orig <- nchar(gaps.orig)
gaps.lead.orig  <- gaps.count.orig[1]
gaps.trail.orig <- gaps.count.orig[length(gaps.count.orig)]
gaps.new        <- unlist(strsplit(as.character(gsub("-","",aln.hit.new)),"[A-Z]"))
gaps.count.new  <- nchar(gaps.new)
gaps.lead.new   <- gaps.count.new[1]
gaps.trail.new  <- gaps.count.new[length(gaps.count.new)]
if(length(gaps.count.orig)>length(gaps.count.new)){
gaps.count.new <- append(gaps.count.new,0)
}
aln.add
aln.add2
aln.add3
aln.add4
aln.hit
aln.hit.name
aln.add
runApp()
plot(1:5)
plot(plotPCs)
runApp()
runApp()
rgl::par3d(view)
rgl::par3d()
runApp()
rgl.open(useNULL = rgl.useNULL())
plot_3Dclusters(SAPCA.add,
plotPCs = plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(SAPCA.add$numerical.alignment$MSA)-1)))
plot_3Dclusters <- function(SAPCA,
plotPCs    = 1:3,
col        = "cluster",
radius     = 1,
labels     = NULL,
write      = FALSE,
axeslabels = "default"){
if (!is.null(SAPCA$seq.space.PCA$coordinates)){
data <- SAPCA$seq.space.PCA$coordinates
}else{
data <- SAPCA
}
if (all(col=="cluster")){
colour <- SAPCA$seq.space.clusters$classification
}else{
colour <- col
}
# Calculate radius size
rad <- (range(SAPCA$seq.space.PCA$coordinates[,plotPCs])[2]-range(SAPCA$seq.space.PCA$coordinates[,plotPCs])[1])/100
rad <- rad*radius
if (all(axeslabels=="default")){
axes <- paste("PC",plotPCs,sep="")
}else{
axes <- axeslabels
}
if (is.null(axeslabels)){
axes <- c("","","")
}
# Plot model-based clusters in 3D
rgl::plot3d(data[,plotPCs],
col      = colour,      # colour by clusters
specular = "black",     # matte lighting
type     = "s",         # "p" is points, "s" is spheres
radius   = rad,         # sphere radius if using spheres
size     = 4,           # point size
axes     = FALSE,       # draw axes separately
xlab     = axes[1],
ylab     = axes[2],
zlab     = axes[3])
# Draw axes
if (write!=FALSE){
rgl::axes3d(color = "black", labels = FALSE)
}else{
rgl::axes3d(color = "black", alpha=0.5, labels = FALSE)
}
for (NAME in labels){
SUB = row.names(SAPCA$seq.space.PCA$coordinates)==NAME      # Label based on its row.name
rgl::text3d(subset(SAPCA$seq.space.PCA$coordinates[,plotPCs],subset=SUB),
text      = paste('---',NAME),   # data label text
font      = 2,                   # bold
color     = "black",             # colour
adj       = -rad/2)              # offset
}
# Write html for interactive data
if (write!=FALSE){
rglwidget::.writeWebGL(write)
}
}
rgl.open(useNULL = rgl.useNULL())
plot_3Dclusters(SAPCA.add,
plotPCs = plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(SAPCA.add$numerical.alignment$MSA)-1)))
plotPCs<-1:3
plot_3Dclusters(SAPCA.add,
plotPCs = plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(SAPCA.add$numerical.alignment$MSA)-1)))
rgl.open()
plot_3Dclusters(SAPCA.add,
plotPCs = plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(SAPCA.add$numerical.alignment$MSA)-1)))
open3d()
plot_3Dclusters(SAPCA.add,
plotPCs = plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(SAPCA.add$numerical.alignment$MSA)-1)))
runApp()
runApp()
library("shinyRGL")
runApp()
runApp()
runApp()
runApp()
paste0(", except for ",
sum(strsplit(DATA()$temp.seq,"")[[1]]=="-"))
psate("MSA")
paste("MSA")
temp
tt
tt<-if(1==2){"this"}
tt
paste(tt,"tjh")
paste0(tt,"tjh")
runApp()
runApp()
runApp()
plot_3Dclusters(SAPCA.add,
plotPCs = plotPCs,
labels = "query",
radius = c(2,rep(0.3,nrow(SAPCA.add$numerical.alignment$MSA)-1)))
rgl::select3d()
runApp()
